/****************************************************************** * Copyright (c) 2015 By Wlpava ******************************************************************/package com.wlpava.quye.service;import java.util.List;import java.util.Map;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.wlpava.core.web.DynamicSpecifications;import com.wlpava.core.web.SearchFilter;import com.wlpava.quye.QuyeService;import com.wlpava.quye.entity.Rent;/** * XXX管理->XXX管理Service *  * @author wenlp */@Service@Transactional(readOnly = true)public class RentService extends QuyeService {	private static Logger log = LoggerFactory.getLogger(RentService.class);	public Page<Rent> getPageable(Map<String, Object> searchParams, Integer pageNumber, Integer pageSize) {		PageRequest pageRequest = buildPageRequest(pageNumber, pageSize);		Map<String, SearchFilter> filters = SearchFilter.parse(searchParams);		Specification<Rent> specification = DynamicSpecifications.bySearchFilter(filters.values(), Rent.class);		return quyeDaos.rentDao.findAll(specification, pageRequest);	}	public Rent findOne(Integer rentId) {		return quyeDaos.rentDao.findOne(rentId);	}	public List<Rent> findAll() {		return (List<Rent>) quyeDaos.rentDao.findAll();	}		@Transactional(readOnly = false)	public Rent create(Rent rent) {		return quyeDaos.rentDao.save(rent);	}	@Transactional(readOnly = false)	public Rent update(Rent rent) {		return quyeDaos.rentDao.save(rent);	}	@Transactional(readOnly = false)	public void delete(Integer rentId) {		quyeDaos.rentDao.delete(rentId);	}}